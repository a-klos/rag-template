name: publish-libs-on-merge
on:
  workflow_dispatch: {}

  push:
    branches: [main]
    paths:
      - '.version'

permissions:
  contents: write
  pull-requests: write
  packages: write
  issues: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        run: |
          VERSION=$(cat .version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        run: |
          pip install poetry==2.1.3

      - name: Configure TestPyPI repository
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/

      - name: Build and publish libs to TestPyPI
        env:
          POETRY_HTTP_BASIC_TESTPYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_TESTPYPI_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          set -e
          for lib in libs/*; do
            [ -d "$lib" ] || continue
            echo "Publishing $lib"
            (cd "$lib" && poetry version "${{ steps.ver.outputs.version }}" && poetry build && poetry publish -r testpypi)
            break  # Exit loop after first library <----------------------------------------------------------------------------DELETE LATER!!!
          done

  lock-services:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        run: |
          pip install poetry==2.1.3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Wait for TestPyPI indexing
        run: |
          set -e
          VERSION="$(cat .version)"
          echo "Waiting for TestPyPI to index internal libs for version $VERSION"
          for name in admin-api-lib extractor-api-lib rag-core-api rag-core-lib; do
            echo "Checking $name==$VERSION"
            seen=false
            for i in $(seq 1 36); do # up to ~3 minutes
              if curl -fsSL "https://test.pypi.org/pypi/$name/json" | jq -e --arg v "$VERSION" '.releases[$v] | length > 0' >/dev/null; then
                echo "Found $name==$VERSION"
                seen=true
                break
              fi
              sleep 5
            done
            if [ "$seen" != "true" ]; then
              echo "Error: $name==$VERSION not visible on TestPyPI yet"
              exit 1
            fi
          done

      - name: Refresh service lockfiles
        run: |
          set -e
          for svc in services/rag-backend services/admin-backend services/document-extractor services/mcp-server; do
            if [ -f "$svc/pyproject.toml" ]; then
              echo "Locking $svc"
              (cd "$svc" && poetry lock)
            fi
          done

      - name: Open PR with updated lockfiles
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/refresh-locks-${{ github.run_number }}
          title: "chore(release): refresh service lockfiles"
          body: |
            Refresh service poetry.lock files after publishing libs.
          commit-message: "chore(release): refresh service lockfiles"
          add-paths: |
            services/**/poetry.lock
          labels: refresh-locks

      - name: PR URL
        run: 'echo "PR created: ${{ steps.cpr.outputs.pull-request-url }}"'
