name: publish-libs-on-merge
on:
  pull_request:
    branches: [main]
    types: [closed]

permissions:
  contents: write
  pull-requests: write
  packages: write
  issues: write

jobs:
  derive:
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'prepare-release') }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Derive version from PR title (fallback to Chart appVersion)
        id: ver
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$TITLE" | sed -nE 's/.*prepare ([0-9]+\.[0-9]+\.[0-9]+(\.post[0-9]+)?).*/\1/p' || true)
          if [ -z "$VERSION" ]; then
            if [ -f infrastructure/rag/Chart.yaml ]; then
              VERSION=$(grep -E '^appVersion:' infrastructure/rag/Chart.yaml | awk '{print $2}' | tr -d '"' | tr -d "'") || true
            fi
          fi
          if [ -z "$VERSION" ]; then
            echo "Could not derive version from PR title or Chart.yaml" >&2
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  publish-lib:
    needs: derive
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        lib: [admin-api-lib, extractor-api-lib, rag-core-api, rag-core-lib]
    env:
      VERSION: ${{ needs.derive.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Poetry
        run: pip install poetry==2.1.3
      - name: Configure TestPyPI repository
        run: poetry config repositories.testpypi https://test.pypi.org/legacy/
      - name: Build and publish ${{ matrix.lib }}
        working-directory: libs/${{ matrix.lib }}
        env:
          POETRY_HTTP_BASIC_TESTPYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_TESTPYPI_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          poetry version "$VERSION"
          poetry build
          poetry publish -r testpypi

  wait-index:
    needs: [publish-lib, derive]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        lib: [admin-api-lib, extractor-api-lib, rag-core-api, rag-core-lib]
    env:
      VERSION: ${{ needs.derive.outputs.version }}
    steps:
      - name: Install jq & curl deps
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Wait for ${{ matrix.lib }} indexing
        run: |
          echo "Waiting for ${{ matrix.lib }}==$VERSION"
          for i in $(seq 1 60); do
            json_ok=false
            simple_ok=false
            if curl -fsSL "https://test.pypi.org/pypi/${{ matrix.lib }}/json" | jq -e --arg v "$VERSION" '.releases[$v] | length > 0' >/dev/null; then
              json_ok=true
            fi
            if curl -fsSL "https://test.pypi.org/simple/${{ matrix.lib }}/" | grep -q "$VERSION"; then
              simple_ok=true
            fi
            if [ "$json_ok" = true ] && [ "$simple_ok" = true ]; then
              echo "Indexed: ${{ matrix.lib }}==$VERSION"
              exit 0
            fi
            sleep 5
          done
          echo "Error: ${{ matrix.lib }}==$VERSION" >&2
          exit 1

  lock-service:
    needs: [wait-index, derive]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [rag-backend, admin-backend, document-extractor, mcp-server]
    env:
      VERSION: ${{ needs.derive.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Poetry & deps
        run: |
          pip install poetry==2.1.3
          python -m pip install --upgrade pip
          python -m pip install "tomlkit==0.13.3"
      - name: Update service dependency pins (idempotent)
        run: python tools/bump_pyproject_deps.py --version "$VERSION" --bump-service-pins
      - name: Lock service ${{ matrix.service }}
        working-directory: services/${{ matrix.service }}
        run: |
          if [ -f pyproject.toml ]; then
            poetry lock -v || (
              echo "Lock failed, clearing caches and retrying...";
              poetry cache clear --all pypi -n || true;
              poetry cache clear --all testpypi -n || true;
              sleep 10;
              poetry lock -v
            )
          fi
      - name: Upload lock artifact
        if: ${{ hashFiles(format('services/{0}/poetry.lock', matrix.service)) != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: lock-${{ matrix.service }}
          path: services/${{ matrix.service }}

  open-pr:
    needs: [lock-service, derive]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.derive.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download lock artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: lock-*
          merge-multiple: true
      - name: Show downloaded lockfiles
        run: |
          ls -R services | head -100 || true
          git status --short || true
      - name: Re-run service pin bump (ensure pyproject reflects version)
        run: |
          python -m pip install --upgrade pip
          python -m pip install "tomlkit==0.13.3"
          python tools/bump_pyproject_deps.py --version "$VERSION" --bump-service-pins
      - name: Create PR with updated lockfiles and pins
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/refresh-locks-${{ needs.derive.outputs.version }}-${{ github.run_number }}
          title: "chore(release): refresh service lockfiles for ${{ needs.derive.outputs.version }}"
          body: |
            Refresh service poetry.lock files and dependency pins for version ${{ needs.derive.outputs.version }}.
          commit-message: "chore(release): refresh service lockfiles and pins"
          add-paths: |
            services/**/pyproject.toml
            services/**/poetry.lock
          labels: refresh-locks
#
